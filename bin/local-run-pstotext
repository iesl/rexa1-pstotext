#!/usr/bin/perl -w

use strict;
use Getopt::Long qw(:config bundling no_ignore_case pass_through);
use POSIX;
use FindBin qw($Bin);

#======================= [ Forward Decls ] =======================
sub runCmd($;$);

#======================= [ syntax ] =======================
sub syntax () {
  print <<EOS;
  local-run-pstotext: [--dir ../my-corpus --logfile-mod <str>]
    produces a logfile named e.g., totext.AE0.log
    or just totext.log if not logfile-mod is specified
EOS
}


#======================= [  ] =======================

my %options=();
GetOptions(
     "dir=s"           => \$options{dir},
     "logfile-mod=s"   => \$options{logmod},
    );

{
  #================= [ Main ] =======================
  {
    my $logfile;

    syntax() and die unless defined ( $options{dir}  );

    if (defined $options{logmod}) {
      $logfile = "totext.$options{logmod}.log";
    }
    else {
      $logfile = "totext.log";
    }

    my $targetdir = $options{dir};

    if ( -d $targetdir ) {
      runCmd( "find $targetdir -type f -regextype posix-extended -regex '.*/[0-9ABCDEF]{40}\$' -exec $Bin/totext --debug --log $logfile --file {} ';' -printf \"mv -f %p.pstotext.* %h/.%f.d/ #MVCMD\n\" | grep 'MVCMD' | sh" ); 
      # kludge: remove any pstotext tmp files that may be left in /tmp
      runCmd( "find /tmp -maxdepth 1 -type f -name 'ps2*' -amin +2 -exec rm {} ';'" );
    }
    else {
      print "no directory to process at ", $targetdir, "\n"
    }
  }   

  #======================= [  ] =======================
  sub runCmd($;$) {
    my ($cmd, $ohandle) = @_;
    print( "running $cmd\n" );
    open( CH, "$cmd |" );
    my $nl;
    while (($nl=<CH>)) {
      print $ohandle $nl if defined $ohandle;
      # print $nl;
    }
    close CH;
  }


}
