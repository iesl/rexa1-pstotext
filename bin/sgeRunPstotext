#!/usr/bin/perl -w
# #!/bin/bash 

# ---------------------------
# -- Grid Engine parameters 
#
# -----------------
# --- interpreter 
#$ -S /bin/sh
#
# -----------------
# --- run from current dir
#$ -cwd 
#
# -----------------
# --- job name
#$ -N rexa.pstotext
#
# -----------------
# --- stdio redirection
#$ -e /dev/null
#$ -o /dev/null
#
# -----------------
# --- force jobs to linux 
#  $ -l arch=lx24-amd64
#  $ -l hostname=dali0
#
# -----------------
# --- restartable
#$ -r y
#
# -----------------
# --- merge stdout/stderr?
#$ -j y
#
# -----------------
# --- pass on entire env
#$ -V
#
# -----------------
# --- use priority of -100
#$ -p -100
#
# -----------------
# --- Mail notifications (begin/end/suspend)
# $ -m bes
# $ -M saunders@cs.umass.edu
#
#$ -t 1-4096

# eval 'exec perl -x -w -S $0 ${1+"$@"}'

use strict; 
use Getopt::Long qw(:config bundling no_ignore_case pass_through);
use POSIX;

#======================= [ Forward Decls ] =======================
sub runCmd($;$);
sub rexa1AllCommands($);
sub justTotextCommands($);
sub hexToPath($);
sub pathToHex($);
sub printlog($);
sub incHexstr($$);
sub countLog($);
sub pruneProcessedFiles($);
sub parseTextLogLine($);

#======================= [ syntax ] =======================
sub syntax () {
  print <<EOS;
  sgeRunPstotext: [--taskid <n>]
EOS
}


#======================= [  ] =======================

my %options=();
GetOptions(
     "taskid=i"    => \$options{taskid},
     "debug"       => \$options{debug},
     "bin"         => \$options{bin},
     "pdfs"        => \$options{pdfs},
     "targetdir"   => \$options{targetdir},
    );



{
  syntax() and die unless defined ( $options{bin} );

  # my $rootdir = `pwd`;
  ## my $workdir = "$rootdir/work";
  # chomp $rootdir;

  my $workdir = $options{pdfs};
  my $bindir = $options{bin};
  my $targetdir = undefined;

  ##
  if (defined $options{targetdir}) {
    $targetdir = $options{targetdir};
  }
  elif ( defined( $ENV{"SGE_TASK_ID"} ) ) {
    $options{taskid} = $ENV{"SGE_TASK_ID"} - 1 unless defined $options{taskid};
    ## figure out what path this task should operate on 
    my $taskid = $options{taskid};
    my $hexPath = incHexstr( $lowHexPath, $taskid );
  }
  elif ( ! defined( $options{taskid} )) {
     syntax() and die 
  }


  # the value of lowHexPath determines how many papers will be operated on at once; 
  # if this is set to "0000", each job will handle files contained within a path-depth of 4, 
  # three for "000", etc. There are ~20 files per leaf directory, so a depth of 4 will 
  # give each job ~20 files to work with, whereas 3 will give each job ~20*16.
 
  my $lowHexPath = "0000";

  ## figure out what path this task should operate on 
  my $taskid = $options{taskid};
  my $hexPath = incHexstr( $lowHexPath, $taskid );
  my $jobLog = "task.$hexPath.log";
  my $machine = `uname -n`;
  chomp $machine;

  #================= [ Main ] =======================
  {
    my $path  = hexToPath( $hexPath );
    print "taskid:$taskid: hex:$hexPath, path:$path\n";
    justTotextCommands( $path );
  }

  #======================= [  ] =======================
  sub justTotextCommands($) {
    my ($path) = @_;
    my $hex = pathToHex( $path );
    my $logfile = "totext.$hex.log";

    # no change to workdir, assume it's already there
    # if it's not, then there are no files to be processed
    if ( -d $workdir ) {
      print "$workdir\n";
      chdir $workdir or die "chdir error : $!\n";

      runCmd( "find $path -mindepth 4 -mindepth 4 -type f -pathre '..{40}' -exec $bindir/totext --logprefix \"$machine:$taskid:\" --log $logfile --file {} ';'" );
      runCmd( "find $path -type f -not -name '*.gz' -exec rm {} ';'" );
      unlink( $logfile ) if -f $logfile;

      # kludge: remove any pstotext tmp files that may be left in /tmp
      runCmd( "find /tmp -type f -name 'ps2*' -maxdepth 1 -amin +2 -exec rm {} ';'" );
    }
    else {
      print "no files to process in ", $path, "\n"
    }
  } 

  #======================= [  ] =======================
  sub rexa1AllCommands($) {
    my ($path) = @_;
    my $hex = pathToHex( $path );
    my $logfile = "totext.$hex.log";

    unless ( -d $workdir ) {
      mkdir $workdir or print "mkdir error: $!\n";
    }
    chdir $workdir or die "chdir error : $!\n";

    ## remove any orphaned log from an incomplete previous run
    unlink( $logfile ) if -f $logfile;
    ## clean out existing files
    runCmd( "rm -rf $path" );

    ## check to see if a log file exists from a previous run: 
    runCmd( "$bindir/rsync-client --module text --get $logfile" );
    if ( -f $logfile ) {
      ## figure out which files need re-processing: 
      my %counts = countLog( $logfile );
      if ( $counts{ZeroLength} gt 0 ) {
        runCmd( "$bindir/rsync-client --module pspdf --get $path" );
        pruneProcessedFiles( $logfile );
      }
      else {
        ## we're done...
        print "Done: no zero-length xml files found";
        unlink( $logfile ) if -f $logfile;
        exit 0;
      }
    }
    else {
      runCmd( "$bindir/rsync-client --module pspdf --get $path" );
    }

    runCmd( "find $path -type f -name '*.document' -exec $bindir/idftype --verbose --file {} ';'" );
    runCmd( "find $path -type f -name '*.ps' -exec $bindir/totext --logprefix \"$machine:$taskid:\" --log $logfile --file {} ';'" );
    runCmd( "find $path -type f -name '*.pdf' -exec $bindir/totext --logprefix \"$machine:$taskid:\" --log $logfile --file {} ';'" );
    runCmd( "find $path -type f -not -name '*.gz' -exec rm {} ';'" );
    runCmd( "$bindir/rsync-client --module text --put $path" );
    runCmd( "$bindir/rsync-client --module text --put $logfile" );
    runCmd( "rm -rf $path" );
    unlink( $logfile ) if -f $logfile;

    # kludge: remove any pstotext tmp files that may be left in /tmp
    runCmd( "find /tmp -type f -name 'ps2*' -maxdepth 1 -amin +2 -exec rm {} ';'" );
  } 

  #======================= [ countLog ] ===================
  sub countLog($) {
    my ($logfile) = @_;
    my %counts = (
      IsAPaper => 0,
      IsNotAPaper => 0,
      IsPossiblyAPaper => 0,
      ZeroLength => 0,
     );
    open( LF, "<$logfile" );
    my $l; 
    while ($l=<LF>) {
      $l =~ /l=0/ and $counts{ZeroLength}++;
      $l =~ /is a paper/ and $counts{IsAPaper}++;
      $l =~ /is not/ and $counts{IsNotAPaper}++;
      $l =~ /is possibly/ and $counts{IsPossiblyAPaper}++;
    }
    return %counts;
  }

  #======================= [ mapLogToActions ] ===================
  sub pruneProcessedFiles($) {
      my ($logfile) = @_;
      rename( "$logfile", "$logfile.prior" );
      open( LFP, "< $logfile.prior" );
      open( LFN, "> $logfile" );
      my $l;
      while ($l=<LFP>) {
          next if $l =~ /^\*/;
          my %logParts = parseTextLogLine( $l );
          if ( $l =~ /l=0/ ) {
                  # reprocess paper
                  print LFN "* $l";
          } else {
                  ## delete files that were already processed:
                  print LFN "$l";
                  print "unlinking $logParts{'file'}\n" if $options{debug};
                  runCmd( "find $workdir/$logParts{'path'} -name '$logParts{fileSHA1}.*' -exec rm -f {} ';'" );
          }
      }
      close LFP;
      close LFN;
      unlink( "$logfile.prior" );
  }
  
  #======================= [ parseTextLogLine ] ==================
  sub parseTextLogLine($) {
    my ($line) = @_;
    my %logParts = ();
    my $hd = "[ABCDEF\\d]";
    ($logParts{'fileSHA1'}) = ($line =~ m/([ABCDEF\d]{40})/g);
    ($logParts{'file'}) = ($line =~ m!($hd/$hd/$hd/$hd/[ABCDEF\d]{40}\.[^\s]+)!g);
    ($logParts{'path'}) = ($line =~ m!($hd/$hd/$hd/$hd)!g);
    ($logParts{'status'}) = ($line =~ m/(is (not |possibly )?a paper)/g);
    return %logParts;
  }

  #======================= [ hexToPath ] =======================
  sub hexToPath($) {
    my ($hex) = @_;
    my $path = $hex;
    my $hd = "[A-Fa-f0-9]";
    $path =~ s!($hd)!$1/!g;
    $path =~ s!/$!!g;
    return $path;
  }

  #======================= [ pathToHex ] =======================
  sub pathToHex($) {
    my ($path) = @_;
    $path =~ s!/!!g;
    return $path;
  }

  #======================= [  ] =======================
  sub runCmd($;$) {
    my ($cmd, $ohandle) = @_;
    ## printlog( "running $cmd\n" );
    open( CH, "$cmd |" );
    my $nl;
    while (($nl=<CH>)) {
      print $ohandle $nl if defined $ohandle;
      # print $nl;
    }
    close CH;
  }

  #======================= [  ] =======================
  sub printlog($) {
    my ($msg) = @_;
    open( LOG, ">> $jobLog" );
    print LOG $msg;
    close LOG;
  }

  #================= [ incHexstr ] =======================
  sub incHexstr($$) {
    my ($hexs, $inc) = @_;
    my $decn = hex ( "$hexs" ) + $inc;
    $hexs = sprintf( "%0" . length( $hexs ) . "X", $decn );
    return "$hexs";
  }

}
