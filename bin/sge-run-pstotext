#!/bin/bash

# ---------------------------
# -- Grid Engine parameters 
#
# -----------------
# --- interpreter 
#$ -S /bin/sh
#
# -----------------
# --- run from current dir
#$ -cwd 
#
# -----------------
# --- job name
#$ -N rexa.pstotext
#
# -----------------
# --- stdio redirection
#$ -e /dev/null
#$ -o /dev/null
#
# -----------------
# --- force jobs to linux 
#  $ -l arch=lx24-amd64
#  $ -l hostname=dali0
#
# -----------------
# --- restartable
# $ -r y
#
# -----------------
# --- merge stdout/stderr?
#$ -j y
#
# -----------------
# --- pass on entire env
#$ -V
#
# -----------------
# --- use priority of -100
# $ -p -100
#
# -----------------
# --- Mail notifications (begin/end/suspend)
# $ -m bes
# $ -M saunders@cs.umass.edu
#
#$ -t 1-65536

eval 'exec perl -x -w -S $0 ${1+"$@"}'

#!/usr/bin/perl -w

use strict;
use Getopt::Long qw(:config bundling no_ignore_case pass_through);
use POSIX;

#======================= [ Forward Decls ] =======================
sub runCmd($;$);
sub justTotextCommands($);
sub hexToPath($);
sub pathToHex($);
sub printlog($);
sub incHexstr($$);
sub countLog($);
sub pruneProcessedFiles($);
sub parseTextLogLine($);

#======================= [ syntax ] =======================
sub syntax () {
  print <<EOS;
  sgeRunPstotext: [--taskid <n>]
EOS
}


#======================= [  ] =======================

my %options=();
GetOptions(
     "taskid=i"      => \$options{taskid},
     "debug"         => \$options{debug},
     "bin=s"         => \$options{bin},
     "targetdir=s"   => \$options{targetdir},
    );



{
  syntax() and die unless defined ( $options{bin} );

  my $workdir = $options{pdfs};
  my $bindir = $options{bin};
  my $targetdir;
  my $taskid;
  my $hexPath;

  ##
  # the value of lowHexPath determines how many papers will be operated on at once; 
  # if this is set to "0000", each job will handle files contained within a path-depth of 4, 
  # three for "000", etc. There are ~20 files per leaf directory, so a depth of 4 will 
  # give each job ~20 files to work with, whereas 3 will give each job ~20*16.

  my $lowHexPath = "0000";

  if ( defined( $ENV{"SGE_TASK_ID"} ) ) {
    $taskid = $ENV{"SGE_TASK_ID"} - 1;
    ## figure out what path this task should operate on 
    $hexPath = incHexstr( $lowHexPath, $taskid );
    my $hexdir = hexToPath($hexPath);
    if (defined $options{targetdir}) {
      $targetdir = "$options{targetdir}/$hexdir";
    }
    else {
      $targetdir = $hexdir;
    }
    
  }
  elsif (defined $options{targetdir}) {
    $targetdir = $options{targetdir};
    $hexPath = pathToHex($targetdir);
    $taskid = 0;
  }
  elsif (defined( $options{taskid})) {
    $taskid = $options{taskid};
    $hexPath = incHexstr($lowHexPath, $taskid);
    $targetdir = hexToPath($hexPath);
  }
  else {
     syntax() and die;
  }

  my $jobLog = "task.$hexPath.log";
  my $machine = `uname -n`;
  chomp $machine;

  #================= [ Main ] =======================
  {
    print "taskid:$taskid: hex:$hexPath, targetdir:$targetdir\n";
    justTotextCommands( $targetdir );
  }

  #======================= [  ] =======================
  sub justTotextCommands($) {
    my ($targetdir) = @_;
    my $hex = pathToHex( $targetdir );
    my $logfile = "totext.$hex.log";

    if ( -d $targetdir ) {
      runCmd( "find $targetdir -type f -regextype posix-extended -regex '.*/[0-9ABCDEF]{40}\$' -exec $bindir/totext --logprefix \"$machine:$taskid:\" --log $logfile --file {} ';' -printf \"mv -f %p.pstotext.* %h/.%f.d/ #MVCMD\n\" | grep 'MVCMD' | sh" ); 
      # kludge: remove any pstotext tmp files that may be left in /tmp
      runCmd( "find /tmp -type f -name 'ps2*' -maxdepth 1 -amin +2 -exec rm {} ';'" );
    }
    else {
      print "no directory to process at ", $targetdir, "\n"
    }
  } 

  #======================= [ hexToPath ] =======================
  sub hexToPath($) {
    my ($hex) = @_;
    my $path = $hex;
    my $hd = "[A-Fa-f0-9]";
    $path =~ s!($hd)!$1/!g;
    $path =~ s!/$!!g;
    return $path;
  }

  #======================= [ pathToHex ] =======================
  sub pathToHex($) {
    my ($path) = @_;
    $path =~ s!/!!g;
    return $path;
  }

  #======================= [  ] =======================
  sub runCmd($;$) {
    my ($cmd, $ohandle) = @_;
    print( "running $cmd\n" );
    open( CH, "$cmd |" );
    my $nl;
    while (($nl=<CH>)) {
      print $ohandle $nl if defined $ohandle;
      # print $nl;
    }
    close CH;
  }

  #======================= [  ] =======================
  sub printlog($) {
    my ($msg) = @_;
    open( LOG, ">> $jobLog" );
    print LOG $msg;
    close LOG;
  }

  #================= [ incHexstr ] =======================
  sub incHexstr($$) {
    my ($hexs, $inc) = @_;
    my $decn = hex ( "$hexs" ) + $inc;
    $hexs = sprintf( "%0" . length( $hexs ) . "X", $decn );
    return "$hexs";
  }

}
