<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
<page n="1">
<line><tbox llx="138" lly="662" urx="491" ury="679" f="1"><![CDATA[AGVI{ Automatic Generation, Verification, and ]]></tbox></line>
<line><tbox llx="176" lly="644" urx="453" ury="661" f="1"><![CDATA[Implementation of Security Protocols ]]></tbox></line>
<line><tbox llx="218" lly="610" urx="276" ury="623" f="2"><![CDATA[Dawn Song ]]></tbox><tbox llx="270" lly="612" urx="404" ury="619" f="3"><![CDATA[dawnsong@cs.berkeley.edu, ]]></tbox></line>
<line><tbox llx="208" lly="598" urx="277" ury="611" f="2"><![CDATA[Adrian Perrig ]]></tbox><tbox llx="271" lly="600" urx="394" ury="607" f="3"><![CDATA[perrig@cs.berkeley.edu, ]]></tbox><tbox llx="392" lly="598" urx="418" ury="611" f="2"><![CDATA[and ]]></tbox></line>
<line><tbox llx="203" lly="586" urx="278" ury="599" f="2"><![CDATA[Doantam Phan ]]></tbox><tbox llx="272" lly="588" urx="418" ury="595" f="3"><![CDATA[dphan@hkn.eecs.berkeley.edu ]]></tbox></line>
<line><tbox llx="241" lly="565" urx="384" ury="578" f="4"><![CDATA[University of California, Berkeley ]]></tbox></line>
<line><tbox llx="164" lly="532" urx="214" ury="542" f="5"><![CDATA[Abstract. ]]></tbox><tbox llx="212" lly="531" urx="461" ury="544" f="4"><![CDATA[As new Internet applications emerge, new security protocols ]]></tbox></line>
<line><tbox llx="164" lly="520" urx="461" ury="533" f="4"><![CDATA[and systems need to be designed and implemented. Unfortunately the ]]></tbox></line>
<line><tbox llx="164" lly="509" urx="461" ury="522" f="4"><![CDATA[current protocol design and implementation process is often ad-hoc and ]]></tbox></line>
<line><tbox llx="164" lly="498" urx="461" ury="511" f="4"><![CDATA[error prone. To solve this problem, we have designed and implemented ]]></tbox></line>
<line><tbox llx="164" lly="487" urx="207" ury="500" f="4"><![CDATA[a toolkit ]]></tbox><tbox llx="202" lly="487" urx="461" ury="500" f="6"><![CDATA[AGVI, Automatic Generation, Verification, and Implementa- ]]></tbox></line>
<line><tbox llx="164" lly="476" urx="276" ury="489" f="6"><![CDATA[tion of Security Protocols. ]]></tbox><tbox llx="271" lly="476" urx="461" ury="489" f="4"><![CDATA[With AGVI, the protocol designer inputs the ]]></tbox></line>
<line><tbox llx="164" lly="465" urx="461" ury="478" f="4"><![CDATA[system specification (such as cryptographic key setup) and security re- ]]></tbox></line>
<line><tbox llx="164" lly="454" urx="461" ury="467" f="4"><![CDATA[quirements. AGVI will then automatically find the near-optimal proto- ]]></tbox></line>
<line><tbox llx="164" lly="444" urx="461" ury="456" f="4"><![CDATA[cols for the specific application, proves the correctness of the protocols ]]></tbox></line>
<line><tbox llx="164" lly="432" urx="461" ury="445" f="4"><![CDATA[and implement the protocols in Java. Our experiments have successfully ]]></tbox></line>
<line><tbox llx="164" lly="422" urx="461" ury="434" f="4"><![CDATA[generated new and even simpler protocols than the ones documented in ]]></tbox></line>
<line><tbox llx="164" lly="411" urx="228" ury="423" f="4"><![CDATA[the literature. ]]></tbox></line>
<line><tbox llx="135" lly="379" urx="240" ury="394" f="7"><![CDATA[1 Introduction ]]></tbox></line>
<line><tbox llx="135" lly="358" urx="490" ury="371" f="2"><![CDATA[As the Internet and electronic commerce prospers, new applications emerge ]]></tbox></line>
<line><tbox llx="135" lly="346" urx="490" ury="359" f="2"><![CDATA[rapidly and require that new security protocols and systems are designed and ]]></tbox></line>
<line><tbox llx="135" lly="334" urx="490" ury="347" f="2"><![CDATA[deployed quickly. Unfortunately, numerous examples show that security proto- ]]></tbox></line>
<line><tbox llx="135" lly="322" urx="490" ury="335" f="2"><![CDATA[cols are diÆcult to design, to verify the correctness, and particularly hard to ]]></tbox></line>
<line><tbox llx="135" lly="310" urx="234" ury="323" f="2"><![CDATA[implement correctly: ]]></tbox></line>
<line><tbox llx="141" lly="292" urx="156" ury="305" f="8"><![CDATA[{ ]]></tbox><tbox llx="152" lly="292" urx="490" ury="305" f="2"><![CDATA[Different security protocols even with the same security properties vary in ]]></tbox></line>
<line><tbox llx="152" lly="280" urx="490" ury="293" f="2"><![CDATA[many system aspects such as computation overhead, communication over- ]]></tbox></line>
<line><tbox llx="152" lly="268" urx="490" ury="281" f="2"><![CDATA[head and battery power consumption. Therefore it is important to design ]]></tbox></line>
<line><tbox llx="152" lly="256" urx="191" ury="267" f="9"><![CDATA[optimal ]]></tbox><tbox llx="189" lly="256" urx="490" ury="269" f="2"><![CDATA[security protocols that suit specific applications. Unfortunately the ]]></tbox></line>
<line><tbox llx="152" lly="244" urx="490" ury="257" f="2"><![CDATA[current process of designing a security protocol is usually ad-hoc and in- ]]></tbox></line>
<line><tbox llx="152" lly="232" urx="490" ury="245" f="2"><![CDATA[volves little formalism and mechanical assistance. Such a design process is ]]></tbox></line>
<line><tbox llx="152" lly="220" urx="490" ury="233" f="2"><![CDATA[not only slow and error prone but also often miss the optimal protocols for ]]></tbox></line>
<line><tbox llx="152" lly="208" urx="251" ury="221" f="2"><![CDATA[specific applications. ]]></tbox></line>
<line><tbox llx="141" lly="197" urx="156" ury="210" f="8"><![CDATA[{ ]]></tbox><tbox llx="152" lly="197" urx="490" ury="210" f="2"><![CDATA[Experience shows that security protocols are often flawed even when they ]]></tbox></line>
<line><tbox llx="152" lly="185" urx="490" ury="198" f="2"><![CDATA[are designed with care. To guarantee the correctness of security protocols, ]]></tbox></line>
<line><tbox llx="152" lly="173" urx="490" ury="186" f="2"><![CDATA[we need formal and rigorous analysis of the protocols, especially automatic ]]></tbox></line>
<line><tbox llx="152" lly="161" urx="237" ury="174" f="2"><![CDATA[protocol verifiers. ]]></tbox></line>
<line><tbox llx="141" lly="150" urx="156" ury="162" f="8"><![CDATA[{ ]]></tbox><tbox llx="152" lly="149" urx="490" ury="163" f="2"><![CDATA[Software is notoriously flawed. Even if the design of the security protocol is ]]></tbox></line>
<line><tbox llx="152" lly="137" urx="490" ury="151" f="2"><![CDATA[correct, various implementation bugs introduced by programmers could still ]]></tbox></line>
<line><tbox llx="152" lly="126" urx="332" ury="139" f="2"><![CDATA[easily break the security of the system. ]]></tbox></line>
<pbox llx="135.00" lly="126.00" urx="491.00" ury="679.00"/></page>
<page n="2">
<line><tbox llx="150" lly="663" urx="422" ury="676" f="1"><![CDATA[To solve these problems, we designed and implemented the ]]></tbox><tbox llx="416" lly="663" urx="450" ury="674" f="2"><![CDATA[AGVI ]]></tbox><tbox llx="452" lly="663" urx="490" ury="676" f="1"><![CDATA[toolkit ]]></tbox></line>
<line><tbox llx="135" lly="651" urx="490" ury="664" f="1"><![CDATA[which stands for Automatic Generation, Verification, and Implementation of ]]></tbox></line>
<line><tbox llx="135" lly="639" urx="490" ury="652" f="1"><![CDATA[Security Protocols. With AGVI, the protocol designer specifies the desired secu- ]]></tbox></line>
<line><tbox llx="135" lly="627" urx="490" ury="640" f="1"><![CDATA[rity requirements, such as authentication and secrecy, and system specification, ]]></tbox></line>
<line><tbox llx="135" lly="615" urx="454" ury="628" f="1"><![CDATA[e.g., symmetric or asymmetric encryption/decryption, low bandwidth. A ]]></tbox><tbox llx="447" lly="615" urx="488" ury="626" f="2"><![CDATA[protocol ]]></tbox></line>
<line><tbox llx="135" lly="604" urx="183" ury="614" f="2"><![CDATA[generator ]]></tbox><tbox llx="181" lly="603" urx="254" ury="616" f="1"><![CDATA[then generates ]]></tbox><tbox llx="248" lly="604" urx="296" ury="614" f="2"><![CDATA[candidate ]]></tbox><tbox llx="293" lly="603" urx="490" ury="616" f="1"><![CDATA[security protocols which satisfy the system ]]></tbox></line>
<line><tbox llx="135" lly="591" urx="490" ury="604" f="1"><![CDATA[requirements using an intelligent exhaustive search in a combinatorial protocol ]]></tbox></line>
<line><tbox llx="135" lly="579" urx="206" ury="592" f="1"><![CDATA[space. Then a ]]></tbox><tbox llx="201" lly="580" urx="281" ury="590" f="2"><![CDATA[protocol screener ]]></tbox><tbox llx="278" lly="579" urx="490" ury="592" f="1"><![CDATA[analyzes the candidate protocols, discards the ]]></tbox></line>
<line><tbox llx="135" lly="567" urx="490" ury="580" f="1"><![CDATA[flawed protocols, and outputs the correct protocols that satisfy the desired secu- ]]></tbox></line>
<line><tbox llx="135" lly="555" urx="293" ury="568" f="1"><![CDATA[rity properties. In the final step, a ]]></tbox><tbox llx="287" lly="556" urx="357" ury="566" f="2"><![CDATA[code generator ]]></tbox><tbox llx="354" lly="555" urx="490" ury="568" f="1"><![CDATA[automatically outputs a Java ]]></tbox></line>
<line><tbox llx="135" lly="543" urx="490" ury="556" f="1"><![CDATA[implementation from the formal specification of the generated security protocols. ]]></tbox></line>
<line><tbox llx="150" lly="531" urx="490" ury="544" f="1"><![CDATA[Even a simple security protocol can have an enormous protocol space (for ]]></tbox></line>
<line><tbox llx="135" lly="519" urx="490" ury="532" f="1"><![CDATA[example, for a four-round authentication protocol, even after constraining mes- ]]></tbox></line>
<line><tbox llx="135" lly="507" urx="445" ury="521" f="1"><![CDATA[sage format and sending order, we estimate that there are at least 10 ]]></tbox><tbox llx="435" lly="513" urx="446" ury="519" f="3"><![CDATA[12 ]]></tbox><tbox llx="447" lly="507" urx="490" ury="521" f="1"><![CDATA[possible ]]></tbox></line>
<line><tbox llx="135" lly="495" urx="490" ury="509" f="1"><![CDATA[variation protocols that one would need to consider to find an optimal one for the ]]></tbox></line>
<line><tbox llx="135" lly="483" urx="490" ury="497" f="1"><![CDATA[specific application!). Facing this challenge, we have developed powerful reduc- ]]></tbox></line>
<line><tbox llx="135" lly="471" urx="490" ury="485" f="1"><![CDATA[tion techniques for the protocol generator to weed out obviously flawed protocols. ]]></tbox></line>
<line><tbox llx="135" lly="459" urx="490" ury="473" f="1"><![CDATA[Because the protocol generator uses simple criteria to rule out obviously flawed ]]></tbox></line>
<line><tbox llx="135" lly="447" urx="490" ury="461" f="1"><![CDATA[protocols, it is fast and can analyze 10; 000 protocols per second. Protocols that ]]></tbox></line>
<line><tbox llx="135" lly="436" urx="490" ury="449" f="1"><![CDATA[were not found flawed by the protocol generator are then send to the protocol ]]></tbox></line>
<line><tbox llx="135" lly="424" urx="490" ury="437" f="1"><![CDATA[screener which can prove whether the protocol is correct or not. Our protocol ]]></tbox></line>
<line><tbox llx="135" lly="412" urx="490" ury="425" f="1"><![CDATA[screener has the ability to analyze protocol executions with any arbitrary proto- ]]></tbox></line>
<line><tbox llx="135" lly="400" urx="490" ury="413" f="1"><![CDATA[col configuration. When it terminates, it either provides a proof that a protocol ]]></tbox></line>
<line><tbox llx="135" lly="388" urx="490" ury="401" f="1"><![CDATA[satisfies its specified property under any arbitrary protocol configuration if it ]]></tbox></line>
<line><tbox llx="135" lly="376" urx="490" ury="389" f="1"><![CDATA[is the case, or it generates a counterexample if the property does not hold. It ]]></tbox></line>
<line><tbox llx="135" lly="364" urx="490" ury="377" f="1"><![CDATA[also exploits many state space reduction techniques to achieve high eÆciency. ]]></tbox></line>
<line><tbox llx="135" lly="352" urx="490" ury="365" f="1"><![CDATA[On average, our protocol screener can check 5 to 10 synthesized protocols per ]]></tbox></line>
<line><tbox llx="135" lly="340" urx="467" ury="353" f="1"><![CDATA[second (measured on a 500 MHz Pentium III workstation running Linux). ]]></tbox></line>
<line><tbox llx="150" lly="328" urx="490" ury="341" f="1"><![CDATA[We have successfully experimented with AGVI in several applications. We ]]></tbox></line>
<line><tbox llx="135" lly="316" urx="490" ury="329" f="1"><![CDATA[have found new protocols for authentication and key distribution protocols using ]]></tbox></line>
<line><tbox llx="135" lly="304" urx="490" ury="317" f="1"><![CDATA[AGVI and some of them are even simpler than the standard protocols docu- ]]></tbox></line>
<line><tbox llx="135" lly="292" urx="490" ury="305" f="1"><![CDATA[mented in the literature such as ISO standards [Int93]. Details about the exper- ]]></tbox></line>
<line><tbox llx="135" lly="280" urx="431" ury="293" f="1"><![CDATA[iments and techniques in the tool can be found in [PS00a,PS00b]. ]]></tbox></line>
<line><tbox llx="135" lly="249" urx="295" ury="264" f="5"><![CDATA[2 Components in AGVI ]]></tbox></line>
<line><tbox llx="135" lly="228" urx="291" ury="240" f="6"><![CDATA[2.1 The Protocol Generator ]]></tbox></line>
<line><tbox llx="135" lly="209" urx="490" ury="222" f="1"><![CDATA[Our protocol generator generates candidate protocols that satisfy the specified ]]></tbox></line>
<line><tbox llx="135" lly="197" urx="490" ury="210" f="1"><![CDATA[system specification and discards obviously flawed protocols at an early stage. ]]></tbox></line>
<line><tbox llx="135" lly="185" urx="452" ury="199" f="1"><![CDATA[Intuitively, the protocol space is infinite. To solve this problem is to use ]]></tbox><tbox llx="446" lly="186" urx="488" ury="197" f="2"><![CDATA[iterative ]]></tbox></line>
<line><tbox llx="135" lly="174" urx="187" ury="185" f="2"><![CDATA[deepening, ]]></tbox><tbox llx="183" lly="173" urx="429" ury="187" f="1"><![CDATA[a standard search technique. In each iteration, we set a ]]></tbox><tbox llx="423" lly="174" urx="488" ury="185" f="2"><![CDATA[cost threshold ]]></tbox></line>
<line><tbox llx="135" lly="161" urx="490" ury="175" f="1"><![CDATA[of protocols. We then search through the protocol space to generate all the ]]></tbox></line>
<line><tbox llx="135" lly="149" urx="490" ury="163" f="1"><![CDATA[protocols below the given cost threshold. After sorting the protocols, the protocol ]]></tbox></line>
<line><tbox llx="135" lly="137" urx="490" ury="151" f="1"><![CDATA[screener tests them in the order of increasing cost. If one protocol satisfies the ]]></tbox></line>
<line><tbox llx="135" lly="126" urx="490" ury="139" f="1"><![CDATA[desired properties, it is minimal with respect to the cost metric function given ]]></tbox></line>
<pbox llx="135.00" lly="126.00" urx="490.00" ury="676.00"/></page>
<page n="3">
<line><tbox llx="135" lly="663" urx="490" ury="676" f="1"><![CDATA[by the user and the generation process stops. Otherwise, we increase the cost ]]></tbox></line>
<line><tbox llx="135" lly="651" urx="315" ury="664" f="1"><![CDATA[threshold and generate more protocols. ]]></tbox></line>
<line><tbox llx="150" lly="639" urx="490" ury="652" f="1"><![CDATA[A simple three-party authentication and key distribution protocol has a pro- ]]></tbox></line>
<line><tbox llx="135" lly="627" urx="244" ury="640" f="1"><![CDATA[tocol space of order 10 ]]></tbox><tbox llx="234" lly="632" urx="245" ury="638" f="2"><![CDATA[12 ]]></tbox><tbox llx="243" lly="627" urx="490" ury="640" f="1"><![CDATA[. Our protocol generator generates and analyzes 10000 ]]></tbox></line>
<line><tbox llx="135" lly="615" urx="490" ury="628" f="1"><![CDATA[protocols per second, which would take over three years to explore the entire ]]></tbox></line>
<line><tbox llx="135" lly="603" urx="490" ury="616" f="1"><![CDATA[space. We have developed powerful protocol space reduction techniques to prune ]]></tbox></line>
<line><tbox llx="135" lly="591" urx="490" ury="604" f="1"><![CDATA[the search tree at an early stage. With these pruning techniques, it only takes ]]></tbox></line>
<line><tbox llx="135" lly="579" urx="490" ury="592" f="1"><![CDATA[the protocol generator a few hours to scan through the protocol space of order ]]></tbox></line>
<line><tbox llx="135" lly="567" urx="155" ury="580" f="1"><![CDATA[10 ]]></tbox><tbox llx="145" lly="573" urx="156" ury="578" f="2"><![CDATA[12 ]]></tbox><tbox llx="154" lly="567" urx="361" ury="580" f="1"><![CDATA[. More details are included in [PS00a,PS00b]. ]]></tbox></line>
<line><tbox llx="135" lly="540" urx="283" ury="553" f="3"><![CDATA[2.2 The Protocol Screener ]]></tbox></line>
<line><tbox llx="135" lly="523" urx="490" ury="536" f="1"><![CDATA[We use Athena as the protocol screener [Son99,SBP00]. Athena uses an extension ]]></tbox></line>
<line><tbox llx="135" lly="511" urx="490" ury="524" f="1"><![CDATA[of the recently proposed Strand Space Model [THG98] to represent protocol ]]></tbox></line>
<line><tbox llx="135" lly="499" urx="490" ury="512" f="1"><![CDATA[execution. Athena incorporates a new logic that can express security properties ]]></tbox></line>
<line><tbox llx="135" lly="487" urx="490" ury="500" f="1"><![CDATA[including authentication, secrecy and properties related to electronic commerce. ]]></tbox></line>
<line><tbox llx="135" lly="475" urx="490" ury="488" f="1"><![CDATA[An automatic procedure enables Athena to evaluate well-formed formulae in ]]></tbox></line>
<line><tbox llx="135" lly="463" urx="490" ury="476" f="1"><![CDATA[this logic. For a well-formed formula, if the evaluation procedure terminates, it ]]></tbox></line>
<line><tbox llx="135" lly="451" urx="490" ury="464" f="1"><![CDATA[will generate a counterexample if the formula is false, or provide a proof if the ]]></tbox></line>
<line><tbox llx="135" lly="439" urx="490" ury="452" f="1"><![CDATA[formula is true. Even when the procedure does not terminate when we allow any ]]></tbox></line>
<line><tbox llx="135" lly="427" urx="490" ury="440" f="1"><![CDATA[arbitrary configurations of the protocol execution, (for example, any number of ]]></tbox></line>
<line><tbox llx="135" lly="415" urx="490" ury="428" f="1"><![CDATA[initiators and responders), termination could be forced by bounding the number ]]></tbox></line>
<line><tbox llx="135" lly="403" urx="490" ury="416" f="1"><![CDATA[of concurrent protocol runs and the length of messages, as is done in most existing ]]></tbox></line>
<line><tbox llx="135" lly="391" urx="215" ury="404" f="1"><![CDATA[automatic tools. ]]></tbox></line>
<line><tbox llx="150" lly="379" urx="490" ury="392" f="1"><![CDATA[Athena also exploits several state space reduction techniques. Powered with ]]></tbox></line>
<line><tbox llx="135" lly="367" urx="490" ury="380" f="1"><![CDATA[techniques such as backward search and symbolic representation, Athena natu- ]]></tbox></line>
<line><tbox llx="135" lly="355" urx="490" ury="368" f="1"><![CDATA[rally avoids the state space explosion problem commonly caused by asynchronous ]]></tbox></line>
<line><tbox llx="135" lly="343" urx="490" ury="356" f="1"><![CDATA[composition and symmetry redundancy. Athena also has the advantage that it ]]></tbox></line>
<line><tbox llx="135" lly="331" urx="490" ury="344" f="1"><![CDATA[can easily incorporate results from theorem proving through unreachability the- ]]></tbox></line>
<line><tbox llx="135" lly="319" urx="490" ury="333" f="1"><![CDATA[orems. By using the unreachability theorems, it can prune the state space at ]]></tbox></line>
<line><tbox llx="135" lly="307" urx="490" ury="321" f="1"><![CDATA[an early stage, hence, further reduce the state space explored and increase the ]]></tbox></line>
<line><tbox llx="135" lly="295" urx="490" ury="309" f="1"><![CDATA[likely-hood of termination. These techniques dramatically reduce the state space ]]></tbox></line>
<line><tbox llx="135" lly="283" urx="259" ury="297" f="1"><![CDATA[that needs to be explored. ]]></tbox></line>
<line><tbox llx="135" lly="256" urx="274" ury="269" f="3"><![CDATA[2.3 The Code Generator ]]></tbox></line>
<line><tbox llx="135" lly="239" urx="490" ury="252" f="1"><![CDATA[Our goal for the automatic code generator is to prevent implementation weak- ]]></tbox></line>
<line><tbox llx="135" lly="227" urx="490" ury="240" f="1"><![CDATA[nesses, and obtain a secure implementation if the initial protocol is secure. The ]]></tbox></line>
<line><tbox llx="135" lly="215" urx="490" ury="228" f="1"><![CDATA[code generator is essentially a translator which translates the formal specification ]]></tbox></line>
<line><tbox llx="135" lly="203" urx="490" ury="216" f="1"><![CDATA[into Java code. Given that the translation rules are correct, the final impleme- ]]></tbox></line>
<line><tbox llx="135" lly="191" urx="490" ury="204" f="1"><![CDATA[nation can be shown to be correct using proof by construction. In particular, ]]></tbox></line>
<line><tbox llx="135" lly="179" urx="490" ury="193" f="1"><![CDATA[we show that our implementation is secure against some of the most common ]]></tbox></line>
<line><tbox llx="135" lly="167" urx="209" ury="181" f="1"><![CDATA[vulnerabilities: ]]></tbox></line>
<line><tbox llx="141" lly="150" urx="239" ury="162" f="3"><![CDATA[{ Buffer overruns ]]></tbox><tbox llx="234" lly="149" urx="490" ury="163" f="1"><![CDATA[account for more than half of all recent security vulnera- ]]></tbox></line>
<line><tbox llx="152" lly="137" urx="490" ury="151" f="1"><![CDATA[bilities. Since we use Java as our implementation language, our automatically ]]></tbox></line>
<line><tbox llx="152" lly="126" urx="396" ury="139" f="1"><![CDATA[generated code is immune against this class of attack. ]]></tbox></line>
<pbox llx="135.00" lly="126.00" urx="490.00" ury="676.00"/></page>
<page n="4">
<line><tbox llx="141" lly="663" urx="255" ury="675" f="1"><![CDATA[{ False input attacks ]]></tbox><tbox llx="249" lly="663" urx="490" ury="676" f="2"><![CDATA[result from unchecked input parameters or unchecked ]]></tbox></line>
<line><tbox llx="152" lly="651" urx="490" ury="664" f="2"><![CDATA[conditions or errors. Our automatic implementation ensures that all input ]]></tbox></line>
<line><tbox llx="152" lly="639" urx="467" ury="652" f="2"><![CDATA[parameters are carefully checked to have the right format before used. ]]></tbox></line>
<line><tbox llx="141" lly="627" urx="215" ury="640" f="1"><![CDATA[{ Type flaws ]]></tbox><tbox llx="210" lly="627" urx="490" ury="640" f="2"><![CDATA[occur when one message component can be interpreted as an- ]]></tbox></line>
<line><tbox llx="152" lly="615" urx="490" ury="628" f="2"><![CDATA[other message component of a different form. In the implementation, we use ]]></tbox></line>
<line><tbox llx="152" lly="603" urx="326" ury="616" f="2"><![CDATA[typed messages to prevent type flaws. ]]></tbox></line>
<line><tbox llx="141" lly="591" urx="234" ury="604" f="1"><![CDATA[{ Replay attacks ]]></tbox><tbox llx="228" lly="591" urx="253" ury="605" f="2"><![CDATA[and ]]></tbox><tbox llx="247" lly="591" urx="339" ury="604" f="1"><![CDATA[freshness attacks ]]></tbox><tbox llx="333" lly="591" urx="490" ury="605" f="2"><![CDATA[are attacks where the attacker can ]]></tbox></line>
<line><tbox llx="152" lly="579" urx="490" ury="593" f="2"><![CDATA[reuse old message components in the attack. Athena already ensures that the ]]></tbox></line>
<line><tbox llx="152" lly="567" urx="490" ury="581" f="2"><![CDATA[protocols are secure against these attacks. To ensure that the implementation ]]></tbox></line>
<line><tbox llx="152" lly="555" urx="490" ury="569" f="2"><![CDATA[is secure, we use cryptographically secure pseudo-random number generators ]]></tbox></line>
<line><tbox llx="152" lly="543" urx="265" ury="557" f="2"><![CDATA[to create secure nonces. ]]></tbox></line>
<line><tbox llx="150" lly="522" urx="490" ury="536" f="2"><![CDATA[The code generator uses the same protocol description as Athena uses. The ]]></tbox></line>
<line><tbox llx="135" lly="511" urx="490" ury="524" f="2"><![CDATA[generated code provides a simple yet flexible API for the application programmer ]]></tbox></line>
<line><tbox llx="135" lly="499" urx="490" ury="512" f="2"><![CDATA[to interface with. More details about the code generator can be found in [PPS00]. ]]></tbox></line>
<line><tbox llx="270" lly="274" urx="305" ury="284" f="3"><![CDATA[Fig. 1. ]]></tbox><tbox llx="301" lly="273" urx="355" ury="286" f="4"><![CDATA[AGVI GUI ]]></tbox></line>
<line><tbox llx="135" lly="220" urx="240" ury="235" f="5"><![CDATA[3 Experiments ]]></tbox></line>
<line><tbox llx="135" lly="197" urx="490" ury="210" f="2"><![CDATA[We have used AGVI to automatically generate and implement authentication ]]></tbox></line>
<line><tbox llx="135" lly="185" urx="490" ury="199" f="2"><![CDATA[and key distribution protocols involving two parties with or without a trusted ]]></tbox></line>
<line><tbox llx="135" lly="173" urx="490" ury="187" f="2"><![CDATA[third party. In one experiment, we vary the system aspects: one system speci- ]]></tbox></line>
<line><tbox llx="135" lly="161" urx="490" ury="175" f="2"><![CDATA[cation has a low computation overhead but a high communication overhead ]]></tbox></line>
<line><tbox llx="135" lly="149" urx="490" ury="163" f="2"><![CDATA[and another system specication has a low communication overhead and a high ]]></tbox></line>
<line><tbox llx="135" lly="137" urx="490" ury="151" f="2"><![CDATA[computation overhead. The AGVI found different optimal protocols for metric ]]></tbox></line>
<line><tbox llx="135" lly="126" urx="490" ury="139" f="2"><![CDATA[functions used in the two different cases. In another experiment, we vary the ]]></tbox></line>
<pbox llx="135.00" lly="126.00" urx="490.00" ury="676.00"/></page>
<page n="5">
<line><tbox llx="135" lly="663" urx="490" ury="676" f="1"><![CDATA[security properties required by the system. Key distribution protocols normally ]]></tbox></line>
<line><tbox llx="135" lly="651" urx="490" ury="664" f="1"><![CDATA[have a long list of possile security properties and an application might only re- ]]></tbox></line>
<line><tbox llx="135" lly="639" urx="490" ury="652" f="1"><![CDATA[quire a subset of the list. The AGVI also found different optimal protocols for ]]></tbox></line>
<line><tbox llx="135" lly="627" urx="490" ury="640" f="1"><![CDATA[different security requirements. In both experiments, AGVI found new proto- ]]></tbox></line>
<line><tbox llx="135" lly="615" urx="490" ury="628" f="1"><![CDATA[cols that are more eÆcient or as eÆcient as the protocols documented in the ]]></tbox></line>
<line><tbox llx="135" lly="603" urx="386" ury="616" f="1"><![CDATA[literature. More details can be found in [PS00a,PS00b]. ]]></tbox></line>
<line><tbox llx="135" lly="591" urx="237" ury="604" f="2"><![CDATA[Acknowledgments: ]]></tbox><tbox llx="232" lly="591" urx="490" ury="604" f="1"><![CDATA[We would like to thank Doug Tygar and Jon Millen for ]]></tbox></line>
<line><tbox llx="135" lly="579" urx="358" ury="592" f="1"><![CDATA[their encouragement and stimulating discussions. ]]></tbox></line>
<line><tbox llx="135" lly="547" urx="208" ury="561" f="3"><![CDATA[References ]]></tbox></line>
<line><tbox llx="135" lly="524" urx="489" ury="537" f="4"><![CDATA[[CJ97] J. Clark and J. Jacob. A survey of authentication protocol literature. ]]></tbox></line>
<line><tbox llx="174" lly="513" urx="482" ury="526" f="4"><![CDATA[http://www.cs.york.ac.uk/~jac/papers/drareview.ps.gz, 1997. Version 1.0. ]]></tbox></line>
<line><tbox llx="135" lly="502" urx="489" ury="515" f="4"><![CDATA[[CJM98] E.M. Clarke, S. Jha, and W. Marrero. Using state space exploration and a ]]></tbox></line>
<line><tbox llx="174" lly="492" urx="489" ury="504" f="4"><![CDATA[natural deduction style message derivation engine to verify security protocols. ]]></tbox></line>
<line><tbox llx="174" lly="480" urx="191" ury="493" f="4"><![CDATA[In ]]></tbox><tbox llx="185" lly="481" urx="489" ury="493" f="5"><![CDATA[In Proceedings of the IFIP Working Conference on Programming Concepts ]]></tbox></line>
<line><tbox llx="174" lly="470" urx="301" ury="482" f="5"><![CDATA[and Methods (PROCOMET), ]]></tbox><tbox llx="296" lly="470" urx="325" ury="482" f="4"><![CDATA[1998. ]]></tbox></line>
<line><tbox llx="135" lly="459" urx="339" ury="471" f="4"><![CDATA[[Int93] International Standards Organization. ]]></tbox><tbox llx="339" lly="459" urx="489" ury="471" f="5"><![CDATA[Information Technology - Security ]]></tbox></line>
<line><tbox llx="174" lly="448" urx="489" ury="460" f="5"><![CDATA[techniques | Entity Authentication Mechanisms Part 3: Entity authentica- ]]></tbox></line>
<line><tbox llx="174" lly="437" urx="314" ury="449" f="5"><![CDATA[tion using symmetric techniques, ]]></tbox><tbox llx="309" lly="437" urx="402" ury="449" f="4"><![CDATA[1993. ISO/IEC 9798. ]]></tbox></line>
<line><tbox llx="135" lly="426" urx="428" ury="438" f="4"><![CDATA[[Mea94] C. Meadows. The NRL protocol analyzer: An overview. In ]]></tbox><tbox llx="424" lly="426" urx="489" ury="438" f="5"><![CDATA[Proceedings of ]]></tbox></line>
<line><tbox llx="174" lly="415" urx="489" ury="427" f="5"><![CDATA[the Second International Conference on the Practical Applications of Prolog, ]]></tbox></line>
<line><tbox llx="174" lly="404" urx="203" ury="416" f="4"><![CDATA[1994. ]]></tbox></line>
<line><tbox llx="135" lly="393" urx="335" ury="405" f="4"><![CDATA[[Mil95] J. Millen. The Interrogator model. In ]]></tbox><tbox llx="329" lly="393" urx="489" ury="405" f="5"><![CDATA[Proceedings of the 1995 IEEE Sympo- ]]></tbox></line>
<line><tbox llx="174" lly="382" urx="304" ury="394" f="5"><![CDATA[sium on Security and Privacy, ]]></tbox><tbox llx="299" lly="382" urx="391" ury="394" f="4"><![CDATA[pages 251{260, 1995. ]]></tbox></line>
<line><tbox llx="135" lly="371" urx="490" ury="383" f="4"><![CDATA[[MMS97] J. C. Mitchell, M. Mitchell, and U. Stern. Automated analysis of crypto- ]]></tbox></line>
<line><tbox llx="174" lly="360" urx="317" ury="372" f="4"><![CDATA[graphic protocols using mur'. In ]]></tbox><tbox llx="312" lly="360" urx="489" ury="372" f="5"><![CDATA[Proceedings of the 1997 IEEE Symposium ]]></tbox></line>
<line><tbox llx="174" lly="349" urx="282" ury="361" f="5"><![CDATA[on Security and Privacy. ]]></tbox><tbox llx="277" lly="349" urx="434" ury="361" f="4"><![CDATA[IEEE Computer Society Press, 1997. ]]></tbox></line>
<line><tbox llx="135" lly="338" urx="489" ury="350" f="4"><![CDATA[[PPS00] Adrian Perrig, Doantam Phan, and Dawn Xiaodong Song. ACG{automatic ]]></tbox></line>
<line><tbox llx="174" lly="327" urx="489" ury="340" f="4"><![CDATA[code generation. automatic implementation of a security protocol. Technical ]]></tbox></line>
<line><tbox llx="174" lly="316" urx="369" ury="329" f="4"><![CDATA[Report 00-1120, UC Berkeley, December 2000. ]]></tbox></line>
<line><tbox llx="135" lly="305" urx="489" ury="318" f="4"><![CDATA[[PS00a] Adrian Perrig and Dawn Song. A first step towards the automatic generation ]]></tbox></line>
<line><tbox llx="174" lly="294" urx="276" ury="307" f="4"><![CDATA[of security protocols. In ]]></tbox><tbox llx="269" lly="294" urx="489" ury="307" f="5"><![CDATA[Network and Distributed System Security Symposium, ]]></tbox></line>
<line><tbox llx="174" lly="283" urx="243" ury="296" f="4"><![CDATA[February 2000. ]]></tbox></line>
<line><tbox llx="135" lly="272" urx="489" ury="285" f="4"><![CDATA[[PS00b] Adrian Perrig and Dawn Xiaodong Song. Looking for diamonds in the dessert: ]]></tbox></line>
<line><tbox llx="174" lly="261" urx="489" ury="274" f="4"><![CDATA[Automatic security protocol generation for three-party authentication and ]]></tbox></line>
<line><tbox llx="174" lly="250" urx="260" ury="263" f="4"><![CDATA[key distribution. In ]]></tbox><tbox llx="253" lly="250" urx="489" ury="263" f="5"><![CDATA[Proc. of IEEE Computer Security Foundations Workshop ]]></tbox></line>
<line><tbox llx="174" lly="239" urx="224" ury="252" f="5"><![CDATA[CSFW 13, ]]></tbox><tbox llx="219" lly="239" urx="269" ury="252" f="4"><![CDATA[July 2000. ]]></tbox></line>
<line><tbox llx="135" lly="228" urx="489" ury="241" f="4"><![CDATA[[SBP00] Dawn Song, Sergey Berezin, and Adrian Perrig. Athena, a new eÆcient ]]></tbox></line>
<line><tbox llx="174" lly="218" urx="346" ury="230" f="4"><![CDATA[automatic checker for security protocols. ]]></tbox><tbox llx="343" lly="218" urx="489" ury="230" f="5"><![CDATA[Submitted to Journal of Computer ]]></tbox></line>
<line><tbox llx="174" lly="207" urx="217" ury="219" f="5"><![CDATA[Security, ]]></tbox><tbox llx="212" lly="207" urx="241" ury="219" f="4"><![CDATA[2000. ]]></tbox></line>
<line><tbox llx="135" lly="196" urx="490" ury="208" f="4"><![CDATA[[Son99] Dawn Song. Athena: An automatic checker for security protocol analysis. In ]]></tbox></line>
<line><tbox llx="174" lly="185" urx="445" ury="197" f="5"><![CDATA[Proceedings of the 12th Computer Science Foundation Workshop, ]]></tbox><tbox llx="440" lly="185" urx="469" ury="197" f="4"><![CDATA[1999. ]]></tbox></line>
<line><tbox llx="135" lly="174" urx="490" ury="186" f="4"><![CDATA[[THG98] F.Javier Thayer, Jonathan C. Herzog, and Joshua D. Guttman. Strand ]]></tbox></line>
<line><tbox llx="174" lly="163" urx="378" ury="175" f="4"><![CDATA[spaces: Why is a security protocol correct? In ]]></tbox><tbox llx="373" lly="163" urx="489" ury="175" f="5"><![CDATA[Proceedings of 1998 IEEE ]]></tbox></line>
<line><tbox llx="174" lly="152" urx="331" ury="164" f="5"><![CDATA[Symposium on Security and Privacy, ]]></tbox><tbox llx="325" lly="152" urx="355" ury="164" f="4"><![CDATA[1998.]]></tbox></line>
<pbox llx="135.00" lly="152.00" urx="490.00" ury="676.00"/></page>
<fonts>
<font name="Unknown" h="12.24" n="1"/>
<font name="Unknown" h="11.66" n="2"/>
<font name="Unknown" h="13.53" n="3"/>
<font name="Unknown" h="11.37" n="4"/>
<font name="Unknown" h="11.23" n="5"/>
<font name="Unknown" h="7.20" n="6"/>
<font name="Unknown" h="13.53" n="7"/>
<font name="Unknown" h="11.66" n="8"/>
<font name="Unknown" h="9.79" n="9"/>
</fonts>
</document>